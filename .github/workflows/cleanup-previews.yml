# Scheduled Preview Cleanup Workflow
# This workflow runs on a schedule to clean up preview deployments for closed PRs
# This prevents the cleanup from appearing as a "skipped" check on open PRs

name: Cleanup Preview Deployments

on:
  schedule:
    # Run every 15 minutes to clean up closed PR previews
    - cron: '*/15 * * * *'
  
  # Manual trigger for testing and immediate cleanup
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'Specific PR number to clean up (optional)'
        required: false
        default: ''

permissions:
  contents: read
  pull-requests: write
  deployments: write

jobs:
  cleanup-closed-pr-previews:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup SSH and clone preview repository
        id: find-cleanup
        run: |
          # Setup SSH for accessing the preview repository
          eval $(ssh-agent -s)
          echo "${{ secrets.PREVIEW_KEY }}" | ssh-add -
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts
          
          # Clone the preview repository to check what needs cleanup
          git clone git@github.com:wafer-space/preview.wafer.space.git preview-repo
          cd preview-repo
          
          # Configure git for commits
          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'
          
          # Find all PR directories (pr-* pattern)
          PR_DIRS=$(find . -maxdepth 1 -type d -name "pr-*" -exec basename {} \; | sort)
          
          if [ -z "$PR_DIRS" ]; then
            echo "No PR preview directories found"
            echo "cleanup_needed=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "Found PR directories: $PR_DIRS"
          echo "cleanup_needed=true" >> $GITHUB_OUTPUT
          
          # Save the list for the next step (one directory per line)
          printf '%s\n' $PR_DIRS > /tmp/pr_directories.txt
      
      - name: Check PR status and clean up closed PRs
        if: steps.find-cleanup.outputs.cleanup_needed == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            // Read the list of PR directories
            const prDirs = fs.readFileSync('/tmp/pr_directories.txt', 'utf8').trim().split('\n').filter(Boolean);
            
            console.log(`Checking ${prDirs.length} PR directories for cleanup`);
            
            const cleanupList = [];
            
            // Check if specific PR was requested via workflow_dispatch
            const specificPR = '${{ github.event.inputs.pr_number }}';
            
            for (const dirName of prDirs) {
              // Extract PR number from directory name (pr-123 or pr-123-feature-name)
              const prMatch = dirName.match(/^pr-(\d+)(?:-.*)?$/);
              if (!prMatch) {
                console.log(`Skipping invalid directory name: ${dirName}`);
                continue;
              }
              
              const prNumber = parseInt(prMatch[1]);
              
              // If specific PR requested, only process that one
              if (specificPR && prNumber !== parseInt(specificPR)) {
                continue;
              }
              
              try {
                // Check if PR exists and is closed
                const { data: pr } = await github.rest.pulls.get({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: prNumber
                });
                
                if (pr.state === 'closed') {
                  console.log(`PR #${prNumber} is closed, marking for cleanup`);
                  cleanupList.push({
                    prNumber: prNumber,
                    dirName: dirName,
                    closedAt: pr.closed_at
                  });
                } else {
                  console.log(`PR #${prNumber} is still open, keeping preview`);
                }
              } catch (error) {
                if (error.status === 404) {
                  console.log(`PR #${prNumber} not found (deleted), marking for cleanup`);
                  cleanupList.push({
                    prNumber: prNumber,
                    dirName: dirName,
                    closedAt: 'unknown'
                  });
                } else {
                  console.error(`Error checking PR #${prNumber}:`, error.message);
                }
              }
            }
            
            console.log(`Found ${cleanupList.length} PR previews to clean up`);
            
            // Save cleanup list for next step
            fs.writeFileSync('/tmp/cleanup_list.json', JSON.stringify(cleanupList, null, 2));
            
            console.log(`Cleanup summary: ${cleanupList.length} PR previews marked for cleanup`);
      
      - name: Perform cleanup of closed PR previews
        if: steps.find-cleanup.outputs.cleanup_needed == 'true'
        run: |
          cd preview-repo
          
          # Read cleanup list
          CLEANUP_LIST=$(cat /tmp/cleanup_list.json)
          CLEANUP_COUNT=$(echo "$CLEANUP_LIST" | jq length)
          
          if [ "$CLEANUP_COUNT" -eq 0 ]; then
            echo "No previews need cleanup"
            exit 0
          fi
          
          echo "Cleaning up $CLEANUP_COUNT preview(s)..."
          
          # Process each item in cleanup list
          echo "$CLEANUP_LIST" | jq -r '.[] | @base64' | while IFS= read -r item; do
            # Decode the JSON item
            ITEM_JSON=$(echo "$item" | base64 --decode)
            DIR_NAME=$(echo "$ITEM_JSON" | jq -r '.dirName')
            PR_NUMBER=$(echo "$ITEM_JSON" | jq -r '.prNumber')
            
            echo "Cleaning up directory: $DIR_NAME (PR #$PR_NUMBER)"
            
            # Remove the PR directory
            if [ -d "$DIR_NAME" ]; then
              rm -rf "$DIR_NAME"
              echo "Removed directory: $DIR_NAME"
            fi
            
            # Remove any redirect directories for this PR (pr-123-*)
            find . -maxdepth 1 -type d -name "pr-${PR_NUMBER}-*" -exec rm -rf {} + || true
          done
          
          # Copy script and template, then regenerate index
          cp ../.github/scripts/generate-preview-index.sh ./
          mkdir -p .github/templates
          cp ../.github/templates/preview-index.html .github/templates/
          chmod +x generate-preview-index.sh
          ./generate-preview-index.sh
          
          # Commit changes if any
          git add .
          if ! git diff --staged --quiet; then
            CLEANUP_SUMMARY=$(echo "$CLEANUP_LIST" | jq -r '.[] | "PR #\(.prNumber)"' | paste -sd ", " -)
            git commit -m "Scheduled cleanup of closed PR previews: $CLEANUP_SUMMARY"
            
            # Re-setup SSH agent for push (may have expired)
            eval $(ssh-agent -s)
            echo "${{ secrets.PREVIEW_KEY }}" | ssh-add -
            git push origin main
            
            echo "Cleanup completed and changes pushed"
          else
            echo "No changes to commit"
          fi
      
      - name: Clean up GitHub deployments for closed PRs
        if: steps.find-cleanup.outputs.cleanup_needed == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            // Read cleanup list
            const cleanupList = JSON.parse(fs.readFileSync('/tmp/cleanup_list.json', 'utf8'));
            
            console.log(`Cleaning up deployments for ${cleanupList.length} closed PRs`);
            
            for (const item of cleanupList) {
              const prNumber = item.prNumber;
              const environment = `pr-preview-${prNumber}`;
              
              try {
                // Get all deployments for this PR environment
                const { data: deployments } = await github.rest.repos.listDeployments({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  environment: environment,
                });
                
                console.log(`Found ${deployments.length} deployments for PR #${prNumber}`);
                
                // Mark each deployment as inactive
                for (const deployment of deployments) {
                  if (!deployment.id || !Number.isInteger(deployment.id)) {
                    console.log(`Skipping invalid deployment ID for PR #${prNumber}: ${deployment.id}`);
                    continue;
                  }
                  
                  await github.rest.repos.createDeploymentStatus({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    deployment_id: deployment.id,
                    state: 'inactive',
                    description: 'Scheduled cleanup - PR closed'
                  });
                  
                  console.log(`Marked deployment ${deployment.id} as inactive for PR #${prNumber}`);
                }
              } catch (error) {
                console.error(`Error cleaning up deployments for PR #${prNumber}:`, error.message);
                // Continue with other PRs even if one fails
              }
            }
            
            console.log('Deployment cleanup completed');
      
      - name: Summary
        if: always()
        run: |
          if [ -f /tmp/cleanup_list.json ]; then
            CLEANUP_COUNT=$(cat /tmp/cleanup_list.json | jq length)
            echo "✅ Scheduled cleanup completed"
            echo "📊 Processed $CLEANUP_COUNT closed PR preview(s)"
            
            if [ "$CLEANUP_COUNT" -gt 0 ]; then
              echo "🧹 Successfully cleaned up:"
              cat /tmp/cleanup_list.json | jq -r '.[] | "  - PR #\(.prNumber) (\(.dirName))"'
            else
              echo "ℹ️  No cleanup needed - all previews are for open PRs"
            fi
          else
            echo "ℹ️  No PR preview directories found"
          fi