# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# Sample workflow for building and deploying a Jekyll site to GitHub Pages
# This workflow handles private theme submodules using SSH deploy keys
#
# Setup required:
# 1. Generate an SSH key pair for the theme repository access
# 2. Add the public key as a deploy key to the theme repository with read access
# 3. Add the private key as a repository secret named 'JEKYLL_THEME_KEY' in:
#    Settings > Secrets and variables > Actions
name: Deploy Jekyll site to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Setup SSH for private submodule
        run: |
          # Setup SSH key for private repository access
          mkdir -p ~/.ssh
          echo "${{ secrets.JEKYLL_THEME_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: false
      
      - name: Initialize submodules with SSH
        run: |
          # Initialize submodules using SSH (without HTTPS conversion)
          git submodule sync --recursive
          git submodule update --init --recursive
          
      - name: Debug git and submodule setup
        run: |
          echo "=== Working directory ==="
          pwd
          ls -la
          echo "=== .gitmodules file ==="
          cat .gitmodules || echo ".gitmodules not found"
          echo "=== Git config ==="
          git config --list | grep submodule || echo "No submodule config found"
          echo "=== .git/config ==="
          cat .git/config | grep -A 5 submodule || echo "No submodule section in .git/config"
          echo "=== Submodule status ==="
          git submodule status
          echo "=== Theme directory contents ==="
          ls -la _theme/ || echo "_theme directory not found"
      - name: Setup Ruby
        # https://github.com/ruby/setup-ruby/releases/tag/v1.207.0
        uses: ruby/setup-ruby@4a9ddd6f338a97768b8006bf671dfbad383215f4
        with:
          ruby-version: '3.1' # Not needed with a .ruby-version file
          bundler-cache: true # runs 'bundle install' and caches installed gems automatically
          cache-version: 0 # Increment this number if you need to re-download cached gems
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v5
      - name: Build with Jekyll
        # Outputs to the './_site' directory by default
        run: bundle exec jekyll build --baseurl "${{ steps.pages.outputs.base_path }}"
        env:
          JEKYLL_ENV: production
      - name: Upload artifact
        # Automatically uploads an artifact from the './_site' directory by default
        uses: actions/upload-pages-artifact@v3

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
