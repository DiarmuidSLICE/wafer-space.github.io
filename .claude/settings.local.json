{
  "permissions": {
    "allow": [
      "Bash(ls:*)",
      "Bash(mv:*)",
      "Bash(find:*)",
      "Bash(mkdir:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(git submodule:*)",
      "Bash(ln:*)",
      "Bash(export PATH=$PATH:~/.local/share/gem/ruby/3.2.0/bin)",
      "Bash(jekyll --version)",
      "Bash(bundle exec jekyll:*)",
      "Bash(git stash:*)",
      "Bash(git checkout:*)",
      "Bash(cp:*)",
      "Bash(diff:*)",
      "Bash(rm:*)",
      "Bash(grep:*)",
      "Bash(bundle install)",
      "Bash(jekyll build)",
      "Bash(bundle config set:*)",
      "Bash(true)",
      "Bash(git reset:*)",
      "Bash(git revert:*)",
      "Bash(chmod:*)",
      "Bash(./verify_identical_output.sh:*)",
      "Bash(git filter-branch:*)",
      "Bash(git for-each-ref:*)",
      "Bash(git gc:*)",
      "Bash(comm:*)",
      "Bash(git ls-tree:*)",
      "Bash(sed:*)",
      "Bash(timeout:*)",
      "Bash(bash verify_identical_output.sh:*)",
      "Bash(cat:*)",
      "Bash(git clean:*)",
      "Bash(make:*)",
      "Bash(git tag:*)",
      "Bash(~/.local/bin/git-filter-repo --help)",
      "Bash(~/.local/bin/git-filter-repo --analyze --force)",
      "Bash(~/.local/bin/git-filter-repo --invert-paths --paths-from-file /tmp/theme_files_clean.txt --force)",
      "Bash(git rev-list:*)",
      "Bash(git remote add:*)",
      "Bash(git cat-file:*)",
      "Bash(git merge-base:*)",
      "Bash(git merge:*)",
      "Bash(gh run list:*)",
      "Bash(gh run view:*)",
      "Bash(gh api:*)",
      "Bash(gh workflow run:*)",
      "Bash(gh workflow:*)",
      "Bash(git push:*)",
      "Bash(grep:*)",
      "Bash(export PATH=$PATH:~/.local/share/gem/ruby/3.2.0/bin)",
      "Bash(make:*)",
      "Bash(export:*)",
      "Bash(bundle install)",
      "Bash(bundle config set:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(bundle exec:*)",
      "Bash(ls:*)",
      "Bash(gh pr create:*)",
      "Bash(gh pr view:*)",
      "Bash(gh pr diff:*)",
      "Bash(ruby --version)",
      "Bash(gh pr checks:*)",
      "Bash(gh run watch:*)",
      "Bash(curl:*)",
      "Bash(gh pr:*)",
      "Bash(nslookup:*)",
      "Bash(git config:*)",
      "Bash(git rm:*)",
      "Bash(./fix_asset_paths.sh:*)",
      "Bash(./fix_relative_url.sh:*)",
      "Bash(rg:*)",
      "Bash(yamllint:*)",
      "WebFetch(domain:preview.wafer.space)",
      "Bash(for file in nav-*.html one-page-nav-*.html _offcanvas-info.html)",
      "Bash(do if [ -f \"$file\" ])",
      "Bash(then sed -i \"s/{{site.url}}/{{ ''\\/'' | relative_url }}/g\" \"$file\")",
      "Bash(fi)",
      "Bash(done)",
      "Bash(for file in nav-*.html one-page-nav*.html)",
      "Bash(then sed -i 's/href=\"\"{{menu\\.url}}\"\"/href=\"\"{{menu.url | relative_url}}\"\"/g' \"$file\")",
      "Bash(for file in _includes/layouts/nav/nav-*.html _includes/layouts/nav/one-page-nav*.html)",
      "Bash(then echo \"Processing $file\")",
      "Bash(node:*)",
      "WebFetch(domain:github.com)",
      "Bash(.github/scripts/verify-preview-site.sh:*)",
      "Bash(muffet:*)",
      "Bash(./temp-tools/muffet:*)",
      "Bash(./muffet:*)",
      "Bash(temp-tools/muffet:*)",
      "Bash(GIT_SEQUENCE_EDITOR=\"cp /tmp/rebase-plan.txt\" git rebase -i development)"
    ],
    "deny": []
  }
}